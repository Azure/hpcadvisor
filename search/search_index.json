{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HPCAdvisor","text":""},{"location":"#goal","title":"Goal","text":"<p>The goal of this tool is to assist users in selecting a cluster configuration based on actual application executions. Underneath, the execution of the application is based on resources provisioned by Azure Batch; but the data collected can be used to make decisions for other environments including Azure CycleCloud, Azure VMSS, Azure VMs, AKS, etc.</p> <p>For now the tool focuses on testing:</p> <ul> <li>SKUs</li> <li>Number of cluster nodes</li> <li>Processes per node</li> <li>Application input parameters</li> </ul> <p>For next versions we will explore other factors such as storage and gpus in addition to other features related to avoiding scenarios to optimize unnecessary tests.</p>"},{"location":"#operations","title":"Operations","text":"<p>The tool offers three operations:</p> <p>1. Data collector. Run the application under multiple scenarios to collect execution times and other metric data (for now cpu usage).</p> <p>2. Plot generator. Generate several plots considering the collected data, including exec time as a function of skus and number of nodes, cost as a function of skus and number of nodes. In addition, plots all of these metrics as a function of the application input parameters.</p> <p>3. Recommendation generator. Generate the pareto front considering execution time and costs. We leave to the user to make the final decision that balances both metrics, as users may be willing to sacrifice execution time in favor of cost for instance. We also provide as output the best time and best cost.</p> <p>In this code we have examples to run tests with actual applications, including WRF, OpenFOAM, NAMD, and GROMACS. Other apps will become available on the way.</p>"},{"location":"#execution-modes-cligui","title":"Execution modes (CLI/GUI)","text":"<p>It also has two execution modes, one via CLI (Command Line Interface) and the other via web browser (GUI).</p> <p>CLI screenshot:</p> <p></p> <p>GUI (browser) screenshot:</p> <p></p>"},{"location":"configfiles/","title":"Configuration Files","text":""},{"location":"configfiles/#ui-defaults","title":"UI defaults","text":"<p>For now the file there has these fields:</p> <ul> <li><code>subscription</code>: subscription used to provision resources</li> <li><code>rgprefix</code>: prefix of resource group name used to host all resources</li> <li><code>region</code>: Azure geographical region of deployment (e.g. eastus,   southcentralus,...)</li> <li><code>appsetupurl</code>: url that contains the bash script with instructions on how to   download input data and application, and how to run the application</li> <li><code>skus</code>: Azure SKUs (VM types) to be tested</li> <li><code>nnodes</code>: Number of nodes to be tested</li> <li><code>ppr</code>: percentage of processes per resource</li> <li><code>appinputs</code>: application inputs (e.g. matrix size and number of execution   interactions for the matrix multiplication application)</li> </ul>"},{"location":"configfiles/#plot-filter","title":"Plot filter","text":"<p>to-be-added</p>"},{"location":"examples/","title":"Examples","text":"<p>Examples of applications to be tested using hpcadvisor:</p>"},{"location":"examples/#matrix-multiplication","title":"Matrix Multiplication","text":"<p>As a starting example, here we have a matrix multiplication application. This \"hello world\" application receives two parameters: size of the squared matrix (dimension) and number of times such multiplication should happen (e.g. only once, or 10, or 100, etc).</p> <p>The files for this example are in the examples folder, which has three files:</p> <ul> <li><code>mpi_matrix_mult.c</code>: which contains the source code of the application.</li> <li><code>appsetup_matrix.sh</code>: which is a shell script that downloads the source file,   compiles it, and generates the application run script that will be used for   each execution scenario.</li> <li><code>plotfilter_matrixmult.json</code>: which is a filter to get consider only data for   this application when generating the plots and the recommendation   (pareto-front data).</li> </ul>"},{"location":"examples/#wrf","title":"WRF","text":"<ul> <li>Weather Research &amp; Forecasting Model (WRF)</li> </ul>"},{"location":"examples/#gromacs","title":"GROMACS","text":"<ul> <li>GROningen MAchine for Chemical Simulations (GROMACS)</li> </ul>"},{"location":"examples/#openfoam","title":"OpenFOAM","text":"<ul> <li>Open Field Operation and Manipulation (OpenFOAM)</li> </ul>"},{"location":"examples/#namd","title":"NAMD","text":"<ul> <li>Nanoscale Molecular Dynamics (NAMD)</li> </ul>"},{"location":"quickstart/","title":"Getting started","text":""},{"location":"quickstart/#setup","title":"Setup","text":"<p>The hpcadvisor setup is based on python poetry to handle dependencies and a python virtual environment.</p> <p>Check poetry installation guidelines HERE. Once poetry is installed run the following commands in your terminal to install and create python virtual environment.</p> <pre><code>git clone https://github.com/Azure/hpcadvisor.git\ncd hpcadvisor\npoetry install\npoetry shell\ncd bin\n</code></pre>"},{"location":"quickstart/#generate-standalone-binary","title":"Generate standalone binary","text":"<p>Alternatively, you can generate a standalone binary file using:</p> <ul> <li>poetry</li> <li>pyinstaller</li> </ul> <p>From project root folder, type:</p> <pre><code>poetry run pyinstaller src/hpcadvisor/__main__.py  --onefile --name hpcadvisor\n</code></pre>"},{"location":"quickstart/#simple-example","title":"Simple example","text":"<p>Follow the matrix multiplication example here for detailed instructions.</p>"},{"location":"quickstart/#cli-based-execution","title":"CLI-based execution","text":"<p>Once the setup above (via poetry) is done, for the matrix multiplication example, you just need to update <code>examples/matrixmult/ui_defaults.json</code> with your preferences. For this example, you only need to update <code>subscription</code>, and you should be good to go:</p> <pre><code>./hpcadvisor -u ../examples/matrixmult/ui_defaults.json\n</code></pre> <p>If you want to only test the plot generator component, skipping the data collection, you need to copy a dataset file to hpcadvisor directory:</p> <pre><code>cp src/samples/dataset.json $HOME/.hpcadvisor/\n./hpcadvisor -u ../examples/matrixmult/ui_defaults.json  \\\n                 -p \\\n                 -pf ../examples/matrixmult/plotfilter.json\n</code></pre> <p>To get the recommendation (pareto-front), just replace the flag <code>-p</code> (plot) to <code>-r</code> (recommendation).</p>"},{"location":"quickstart/#gui-based-execution","title":"GUI-based execution","text":"<p>One can use the browser version and click the buttons for the different operations. To pre-fill user input, specify the input file as showed below:</p> <pre><code>./hpcadvisor -g -u ../examples/matrixmult/ui_defaults.json\n</code></pre>"}]}